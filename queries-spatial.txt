1. punktowe: podaæ wszystkie obiekty, które zawieraj¹ dany punkt.

//sprawdzenie dla punktu (6,3)
//dla testów stworzenie czworok¹ta który zawiera ten punkt:
//INSERT INTO COUNTRY_GEOM 
//    VALUES 
//    (44, MDSYS.SDO_GEOMETRY(2003, NULL,NULL,
//    MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1),
//    MDSYS.SDO_ORDINATE_ARRAY(5,1, 8,1, 8,6, 5,7, 5,1)));

SELECT gid
FROM country_geom c 
WHERE SDO_CONTAINS(c.geom, 
	MDSYS.SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(6,3,0), NULL,NULL)) = 'TRUE'
  ;
  
SELECT gid
FROM country_geom c 
WHERE SDO_CONTAINS(c.geom, (SELECT point FROM city_geom p where p.gid = 10)) = 'TRUE';

SELECT geom_nr
FROM country
WHERE zawiera_punkt(geom_nr, 10) = 1
GROUP BY geom_nr;

2. przeciêcie: znaleŸæ obiekty, które maj¹ czêœæ wspóln¹ z danym odcinkiem/innym obiektem

SELECT a.gid
FROM country_geom a
WHERE SDO_OVERLAPBDYINTERSECT(a.geom, (SELECT b.geom FROM country_geom b where b.gid = 1000)) = 'TRUE';

SELECT geom_nr
FROM country 
WHERE przeciecie(geom_nr, 1000) = 1
GROUP BY geom_nr;

3. zawieranie: podaæ wszystkie obiekty zawarte w danym obszarze (obszar: prostok¹t lub wiêkszy obiekt)
CONTAINS if the second object is entirely within the first object and the object boundaries do not touch; otherwise, returns FALSE.

SELECT gid
  FROM country_geom c 
  where SDO_RELATE(c.GEOM,
  MDSYS.SDO_GEOMETRY(2003, NULL,NULL,
    MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1),
    MDSYS.SDO_ORDINATE_ARRAY(4,0, 9,0, 9,9, 4,9, 4,01)),
    'mask=CONTAINS') = 'TRUE'
;

SELECT b.gid
FROM country_geom a, country_geom b
WHERE SDO_RELATE(a.geom, b.geom, 'mask=CONTAINS') = 'TRUE';

SELECT b.geom_nr
FROM country a, country b
WHERE zawiera_obiekt(a.geom_nr, b.geom_nr, 1) = 1
GROUP BY b.geom_nr;

SELECT r.gid
FROM country c, river r
WHERE zawiera_obiekt(c.geom_nr, r.gid, 1) = 1
GROUP BY r.gid;

SELECT r.gid
FROM country_geom c, river_geom r
WHERE SDO_RELATE(c.geom, r.line, 'mask=CONTAINS') = 'TRUE';

4. zapytania dotycz¹ce s¹siadów: 
4.1 wyznaczanie k najbli¿szych s¹siadów

SELECT * FROM (
  SELECT c1.gid, ROUND(SDO_NN_DISTANCE(1)) DISTANCE
  FROM country_geom c1 , country_geom c2
  where c2.gid = 1
    AND c1.gid != 1
    AND SDO_NN(c1.geom, c2.geom,'sdo_num_res=10',1) = 'TRUE'
  order by DISTANCE asc
  )
  where ROWNUM <=5
;

4.2 podaæ wszystkie obiekty (okreœlonego typu) znajduj¹ce siê w zadanej odleg³oœci.

SELECT gid
  FROM country_geom c 
  where SDO_WITHIN_DISTANCE(c.GEOM,
  MDSYS.SDO_GEOMETRY(2003, NULL,NULL,
    MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1),
    MDSYS.SDO_ORDINATE_ARRAY(10,1, 10,3, 12,3, 12,1, 10,1)),
    'distance=3') = 'TRUE'
;

5. obliczanie pola obiektów

SELECT c.gid, SDO_GEOM.sdo_area(c.GEOM, 1, '')
  FROM country_geom c 
;

SELECT SDO_GEOM.sdo_area(geom, 1, '') 
  FROM system.country_geom 
  WHERE gid = 9;

SELECT geom_nr, system.pole_figury(geom_nr)  
  FROM system.country 
  WHERE geom_nr = 9
  GROUP BY geom_nr;

6. obliczanie odleg³oœci

SELECT c.gid, ROUND(SDO_NN_DISTANCE(1)) DISTANCE
  FROM country_geom c 
  where SDO_NN(c.GEOM,
  MDSYS.SDO_GEOMETRY(2003, NULL,NULL,
    MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1),
    MDSYS.SDO_ORDINATE_ARRAY(10,1, 10,3, 12,3, 12,1, 10,1)),'sdo_num_res=10',1) = 'TRUE'
;